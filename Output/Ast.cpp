/*
 *  VieSched++ Very Long Baseline Interferometry (VLBI) Scheduling Software
 *  Copyright (C) 2018  Matthias Schartner
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "Ast.h"


using namespace VieVS;
using namespace std;

unsigned long Ast::nextId = 0;


Ast::Ast( const std::string &file ) : VieVS_Object( nextId++ ) { of = ofstream( file ); }


void Ast::writeAstFile( const Network &network, const std::vector<Source> &sources, const std::vector<Scan> &scans,
                        const boost::property_tree::ptree &xml, const std::shared_ptr<const ObservingMode> &obsModes ) {
    experiment( xml );

    for ( const auto &station : network.getStations() ) {
        stationParameters( station, obsModes );
    }

    scanOutput( scans, sources, network.getStations(), obsModes );
}


void Ast::experiment( const boost::property_tree::ptree &xml ) {
    const string &expName = xml.get( "VieSchedpp.general.experimentName", "schedule" );

    of << "# VLBI schedule in ast format\n";
    of << "#\n";

    string currentTimeString = xml.get<string>( "VieSchedpp.created.time", "" );
    boost::posix_time::ptime currentTime;
    if ( !currentTimeString.empty() ) {
        currentTime = TimeSystem::string2ptime( currentTimeString );
    } else {
        currentTime = boost::posix_time::second_clock::local_time();
    }
    of << "# Generated on          " << TimeSystem::time2string_ast( TimeSystem::string2ptime( currentTimeString ) )
       << "\n";
    of << "# Generated by:         " << xml.get( "VieSchedpp.created.name", "unknown" ) << "\n";
    of << "# Generated with:       VieSched++    Version " << util::version().substr( 0, 7 ) << "\n";
    of << "#\n";

    of << boost::format( "%-28s %-6s\n" ) % "Experiment:" % expName;
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Experiment_description:" % expName %
              xml.get( "VieSchedpp.output.experimentDescription", "no further description" );
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Schedule_revision:" % expName % "1";
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Scheduler_name:" % expName %
              xml.get( "VieSchedpp.created.name", "unknown" );
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Scheduler_email:" % expName %
              xml.get( "VieSchedpp.created.email", "unknown" );
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Scheduler_phone:" % expName %
              xml.get( "VieSchedpp.created.phone", "unknown" );
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Observer_phone:" % expName %
              xml.get( "VieSchedpp.observer.phone", "unknown" );
    of << boost::format( "  %-26s %-6s    %s.0 %s.0\n" ) % "UTC_experiment_dates:" % expName %
              TimeSystem::time2string_ast( TimeSystem::startTime ) % TimeSystem::time2string_ast( TimeSystem::endTime );
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Corr_spectral_resolution:" % expName % "0.2500  MHz";
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Corr_time_resolution:" % expName % "1.000   sec";
    of << "#\n";
}


void Ast::stationParameters( const Station &station, const std::shared_ptr<const ObservingMode> &obsModes ) {
    const string &staName = station.getName();
    const auto &position = station.getPosition();
    const auto &antenna = station.getAntenna();
    const auto &cableWrap = station.getCableWrap();
    const auto &equip = station.getEquip();

    of << boost::format( "%-28s %-6s    Short_name:    %s\n" ) % "Station_parameters:" % staName %
              station.getAlternativeName();
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Last_update:" % staName % "unknown";
    of << boost::format( "  %-26s %-6s    %11.3f   %11.3f   %11.3f meter \n" ) % "Coordinates:" % staName %
              position.getX() % position.getY() % position.getZ();
    string mount;
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Mount:" % staName % antenna.getMount();

    string ax1 = cableWrap.getMotions().first;
    if ( ax1 == "az" ) {
        ax1 = "azimuth";
    } else if ( ax1 == "ha" ) {
        ax1 = "hour_angle";
    } else if ( ax1 == "x" ) {
        ax1 = "x";
    } else {
        ax1 = "unknown";
    }
    string ax2 = cableWrap.getMotions().second;
    if ( ax2 == "el" ) {
        ax2 = "elevation";
    } else if ( ax2 == "dec" ) {
        ax2 = "declination";
    } else if ( ax2 == "yew" ) {
        ax2 = "yew";
    } else {
        ax2 = "unknown";
    }
    string tmp;
    tmp = ( boost::format( "%7.1f %7.1f %7.1f %7.1f  deg" ) % ( cableWrap.getWLow() * rad2deg ) %
            ( cableWrap.getWUp() * rad2deg ) % ( cableWrap.getCLow() * rad2deg ) % ( cableWrap.getCUp() * rad2deg ) )
              .str();
    of << boost::format( "  %-26s %-6s    %-36s  Axis : %s\n" ) % "1st_axis_range:" % staName % tmp % ax1;
    tmp =
        ( boost::format( "%7.1f %7.1f  deg" ) % ( ( cableWrap.getAxis2Low() ) ) % ( cableWrap.getAxis2Up() * rad2deg ) )
            .str();
    of << boost::format( "  %-26s %-6s    %-36s  Axis : %s\n" ) % "2nd_axis_range:" % staName % tmp % ax2;

    tmp = ( boost::format( "%7.2f  deg/sec" ) % ( antenna.getRate1() * rad2deg ) ).str();
    of << boost::format( "  %-26s %-6s    %-36s  Axis : %s\n" ) % "1st_axis_slewing_rate:" % staName % tmp % ax1;
    tmp = ( boost::format( "%7.2f  deg/sec" ) % ( antenna.getRate2() * rad2deg ) ).str();
    of << boost::format( "  %-26s %-6s    %-36s  Axis : %s\n" ) % "2nd_axis_slewing_rate:" % staName % tmp % ax2;

    tmp = ( boost::format( "%7.2f  deg/sec*sec" ) % ( antenna.getRate1() * rad2deg ) ).str();
    of << boost::format( "  %-26s %-6s    %-36s  Axis : %s\n" ) % "1st_axis_slewing_accl:" % staName % tmp % ax1;
    tmp = ( boost::format( "%7.2f  deg/sec*sec" ) % ( antenna.getRate2() * rad2deg ) ).str();
    of << boost::format( "  %-26s %-6s    %-36s  Axis : %s\n" ) % "2nd_axis_slewing_accl:" % staName % tmp % ax2;

    tmp = ( boost::format( "%7.1f  sec" ) % ( antenna.getCon1() ) ).str();
    of << boost::format( "  %-26s %-6s    %-36s  Axis : %s\n" ) % "1st_axis_settle_time:" % staName % tmp % ax1;
    tmp = ( boost::format( "%7.1f  sec" ) % ( antenna.getCon2() ) ).str();
    of << boost::format( "  %-26s %-6s    %-36s  Axis : %s\n" ) % "2nd_axis_settle_time:" % staName % tmp % ax2;

    of << boost::format( "  %-26s %-6s    %d  sec\n" ) % "Preob_proc_duration:" % staName % station.getPARA().preob;
    of << boost::format( "  %-26s %-6s    %d  sec\n" ) % "Postob_proc_duration:" % staName % 0;

    string recorder = boost::to_lower_copy( station.getRecord_transport_type() );
    of << boost::format( "  %-26s %-6s    %s\n" ) % "Recorder:" % staName % recorder;
    double mbps = obsModes->getMode( 0 )->recordingRate( station.getId() ) * 1e-6;
    of << boost::format( "  %-26s %-6s    %f  Mbps\n" ) % "Recording_rate:" % staName % mbps;
    of << "#\n";
}


void Ast::scanOutput( const std::vector<Scan> &scans, const std::vector<Source> &sources,
                      const std::vector<Station> &stations, const std::shared_ptr<const ObservingMode> &obsModes ) {
    vector<string> prevSourceNames( stations.size() );
    vector<double> prevElev( stations.size() );
    vector<double> prevAz( stations.size() );
    vector<double> prevHourAngle( stations.size() );

    for ( unsigned long i = 0; i < scans.size(); ++i ) {
        const auto &scan = scans[i];
        string name = scan.getName( i, scans );
        const auto &source = sources[scan.getSourceId()];
        const auto &sourceName = source.getName();
        string sourceAltName = source.hasAlternativeName() ? source.getAlternativeName() : "unknown";

        string type = "unknown";
        switch ( scan.getType() ) {
            case Scan::ScanType::highImpact:
                type = "target";
                break;
            case Scan::ScanType::standard:
                type = "target";
                break;
            case Scan::ScanType::fillin:
                type = "target";
                break;
            case Scan::ScanType::calibrator:
                type = "calibrator";
                break;
        }

        of << boost::format(
                  "Scan: %-9s  Source: %-8s  Alt_source_name: %-16s  Ra: %s  Dec %s  Start_time: %s  Stop_time %s  "
                  "Type: %s\n" ) %
                  name % sourceName % sourceAltName % util::ra2dms_astFormat( source.getRa() ) %
                  util::dc2hms_astFormat( source.getDe() ) %
                  TimeSystem::time2string_ast( scan.getTimes().getScanTime( Timestamp::start ) ) %
                  TimeSystem::time2string_ast( scan.getTimes().getScanTime( Timestamp::end ) ) % type;

        for ( unsigned long staid = 0; staid < stations.size(); ++staid ) {
            auto opt = scan.findIdxOfStationId( staid );

            string operation;
            if ( opt.is_initialized() ) {
                operation = "observing";
            } else {
                operation = "skipping";
            }
            const Station &station = stations[staid];
            of << boost::format( "  Station:    %-8s  Scan: %-9s  Operation: %-s  Source: %-8s\n" ) %
                      station.getName() % name % operation % sourceName;

            if ( !opt.is_initialized() ) {
                continue;
            } else {
                int idx = static_cast<int>( opt.get() );
                const ScanTimes &times = scan.getTimes();

                const PointingVector &pv = scan.getPointingVector( idx );
                const PointingVector &pve = scan.getPointingVector( idx, Timestamp::end );

                string wrap = "&und";
                switch ( station.getCableWrap().cableWrapFlag( pv ) ) {
                    case AbstractCableWrap::CableWrapFlag::ccw:
                        wrap = "&ccw";
                        break;
                    case AbstractCableWrap::CableWrapFlag::n:
                        wrap = "&n";
                        break;
                    case AbstractCableWrap::CableWrapFlag::cw:
                        wrap = "&cw";
                        break;
                }

                if ( i == 0 ) {
                    // ##### Set_mode command #####
                    of << boost::format( "    %-9s %-8s  %s %s  Scan: %-9s  Hardware_stup_mode: %s  Wrap: %s\n" ) %
                              "Set_mode:" % station.getName() %
                              TimeSystem::time2string_ast( times.getFieldSystemTime( idx, Timestamp::start ) ) %
                              TimeSystem::time2string_ast( times.getFieldSystemTime( idx, Timestamp::start ) ) % name %
                              obsModes->getMode( 0 )->getName() % wrap;

                } else {
                    // ##### slew command #####
                    of << boost::format(
                              "    %-9s %-8s  %s %s  Scan: %-9s  Sources: %-8s %-8s  Duration: %6.1f  Elevs: %5.2f "
                              "%5.2f  Azims: %7.2f %7.2f  Hour_angles: %6.2f %6.2f  Wrap: %s\n" ) %
                              "Slew:" % station.getName() %
                              TimeSystem::time2string_ast( times.getSlewTime( idx, Timestamp::start ) ) %
                              TimeSystem::time2string_ast( times.getSlewTime( idx, Timestamp::end ) ) % name %
                              prevSourceNames[staid] % sourceName % times.getSlewDuration( idx ) %
                              ( prevElev[idx] * rad2deg ) % ( pv.getEl() * rad2deg ) % ( prevAz[idx] * rad2deg ) %
                              ( pv.getAz() * rad2deg ) % ( prevHourAngle[idx] * rad2deg ) % ( pv.getHa() * rad2deg ) %
                              wrap;
                }

                prevSourceNames[staid] = sourceName;
                prevElev[staid] = pve.getEl();
                prevAz[staid] = pve.getAz();
                prevHourAngle[staid] = pve.getHa();

                // ##### Preob command #####
                of << boost::format(
                          "    %-9s %-8s  %s %s  Scan: %-9s  Source: %-8s  Duration: %6.1f  Proc_name: %s\n" ) %
                          "Preob:" % station.getName() %
                          TimeSystem::time2string_ast( times.getPreobTime( idx, Timestamp::start ) ) %
                          TimeSystem::time2string_ast( times.getPreobTime( idx, Timestamp::end ) ) % name % sourceName %
                          times.getPreobDuration( idx ) % "dummy";

                // ##### Record command #####
                of << boost::format(
                          "    %-9s %-8s  %s %s  Scan: %-9s  Source: %-8s  Duration: %6.1f  Elev: %5.2f Azim: %7.2f  "
                          "Hour_angle: %6.2f\n" ) %
                          "Record:" % station.getName() %
                          TimeSystem::time2string_ast( times.getObservingTime( idx, Timestamp::start ) ) %
                          TimeSystem::time2string_ast( times.getObservingTime( idx, Timestamp::end ) ) % name %
                          sourceName % times.getObservingDuration( idx ) % ( pv.getEl() * rad2deg ) %
                          ( util::wrap2pi( pv.getAz() ) * rad2deg ) % ( pv.getHa() * rad2deg );

                // ##### Postob command #####
                of << boost::format(
                          "    %-9s %-8s  %s %s  Scan: %-9s  Source: %-8s  Duration: %6.1f  Proc_name: %s\n" ) %
                          "Postob:" % station.getName() %
                          TimeSystem::time2string_ast( times.getObservingTime( idx, Timestamp::end ) ) %
                          TimeSystem::time2string_ast( times.getObservingTime( idx, Timestamp::end ) ) % name %
                          sourceName % 0 % "dummy";
            }
        }
        of << "#\n";
    }
}
